#!/usr/bin/env python3
"""
TrustFlow attestation report verification script.

This script verifies TDX attestation reports generated by the report generation
script. It focuses specifically on the report verification functionality from
the TrustFlow attestation modules.
"""

import argparse
import json
import logging
import sys
from typing import Optional

try:
    import trustflow.attestation.verification as verification
    from trustflow.attestation.common import (
        AttestationAttribute,
        AttestationPolicy,
        AttestationReport,
    )
    HAS_TRUSTFLOW = True
except ImportError:
    HAS_TRUSTFLOW = False


def setup_logging(verbose: bool = False):
    """Configure logging for the script."""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )


def load_report_from_file(report_file: str):
    """Load an attestation report from a JSON file."""
    try:
        with open(report_file, 'r') as f:
            report_dict = json.load(f)
        
        # Convert back to JSON string for deserialization
        report_json = json.dumps(report_dict)
        report = AttestationReport.from_json(report_json)
        
        logging.info(f"Report loaded successfully from: {report_file}")
        return report
        
    except Exception as e:
        logging.error(f"Failed to load report from file: {e}")
        return None


def verify_attestation_report(
    report: AttestationReport,
    user_data: Optional[str] = None,
    tee_platform: str = "TDX"
) -> bool:
    """
    Verify a TDX attestation report.
    
    Args:
        report: AttestationReport object to verify
        user_data: Optional hex string for user data to verify against
        tee_platform: TEE platform to verify against
        
    Returns:
        True if verification successful, False otherwise
    """
    if not HAS_TRUSTFLOW:
        logging.error("TrustFlow attestation modules are not available")
        return False
    
    try:
        # Extract user data from report if not provided
        if user_data is None:
            # Try to extract user data from the report
            report_json = report.to_json()
            report_dict = json.loads(report_json)
            user_data = report_dict.get('user_data', '')
            if not user_data:
                logging.warning("No user data provided and none found in report")
        
        # Create attestation attributes for verification
        attrs = AttestationAttribute(
            str_tee_platform=tee_platform,
            hex_user_data=user_data if user_data else ""
        )
        
        logging.info(f"Verifying report with TEE platform: {tee_platform}")
        if user_data:
            logging.info(f"User data for verification: {user_data[:16]}...")
        else:
            logging.info("No user data specified for verification")
        
        # Create attestation policy
        policy = AttestationPolicy(main_attributes=[attrs])
        
        # Verify the report
        status = verification.report_verify(report, policy)
        
        # Output verification results
        print(f"Verification Status Code: {status.code}")
        print(f"Verification Message: {status.message}")
        if hasattr(status, 'detail') and status.detail:
            print(f"Verification Detail: {status.detail}")
        
        if status.code == 0:
            logging.info("Attestation verification successful")
            return True
        else:
            logging.error(f"Attestation verification failed: {status.message}")
            return False
            
    except Exception as e:
        logging.error(f"Attestation verification failed: {e}")
        return False


def main():
    """Main function for the attestation report verification script."""
    parser = argparse.ArgumentParser(
        description="Verify TrustFlow TDX attestation reports"
    )
    parser.add_argument(
        "report_file",
        type=str,
        help="Path to the attestation report file (JSON format)"
    )
    parser.add_argument(
        "--user-data",
        type=str,
        help="Hex string user data to verify against (optional)"
    )
    parser.add_argument(
        "--tee-platform",
        type=str,
        default="TDX",
        help="TEE platform to verify against (default: TDX)"
    )
    parser.add_argument(
        "--verbose",
        "-v",
        action="store_true",
        help="Enable verbose logging"
    )
    
    args = parser.parse_args()
    setup_logging(args.verbose)
    
    if not HAS_TRUSTFLOW:
        logging.error("TrustFlow attestation modules are not available")
        logging.error("Please install trustflow packages:")
        logging.error("  - trustflow.attestation.verification")
        logging.error("  - trustflow.attestation.common")
        return 1
    
    logging.info("Starting TrustFlow attestation report verification")
    
    # Load the attestation report
    report = load_report_from_file(args.report_file)
    if report is None:
        logging.error("Failed to load attestation report")
        return 1
    
    # Verify the report
    success = verify_attestation_report(
        report=report,
        user_data=args.user_data,
        tee_platform=args.tee_platform
    )
    
    if success:
        logging.info("Attestation report verification completed successfully")
        return 0
    else:
        logging.error("Attestation report verification failed")
        return 1


if __name__ == "__main__":
    exit(main())